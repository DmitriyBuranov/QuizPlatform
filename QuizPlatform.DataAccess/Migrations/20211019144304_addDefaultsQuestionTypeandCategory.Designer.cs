// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizPlatform.DataAccess.Data;

namespace QuizPlatform.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211019144304_addDefaultsQuestionTypeandCategory")]
    partial class addDefaultsQuestionTypeandCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuizPlatform.Core.Domain.QuestionManagment.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da2daf11-07ef-43f3-b768-bac2d52fe604"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("24a5a4a2-76ad-43a9-a100-26f74f0567e4"),
                            Name = "History"
                        });
                });

            modelBuilder.Entity("QuizPlatform.Core.Domain.QuestionManagment.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("QuestionGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimerInSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("WithTimer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizPlatform.Core.Domain.QuestionManagment.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a675b11-641c-4de7-a317-84337ad0aeae"),
                            Name = "With exact answer"
                        },
                        new
                        {
                            Id = new Guid("96133875-66fd-4979-81a8-e13f5a510cdc"),
                            Name = "With answer options"
                        });
                });

            modelBuilder.Entity("QuizPlatform.Core.Domain.QuestionManagment.Question", b =>
                {
                    b.HasOne("QuizPlatform.Core.Domain.QuestionManagment.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("QuizPlatform.Core.Domain.QuestionManagment.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId");

                    b.Navigation("Category");

                    b.Navigation("QuestionType");
                });
#pragma warning restore 612, 618
        }
    }
}
